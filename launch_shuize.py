import os
from time import sleep
import public_pool
from public_pool import get_flag_value, chance_flag_value,oneforall_script_process_flag_name
import datetime


def launch_shuize():
    store_folder = get_flag_value('store_floder_name')
    log_store_folder_dir = docker_pentest_information_gather_volume_map_dir + store_folder + '/log/'
    os.chdir('{}ShuiZe_0x727'.format(docker_pentest_information_gather_volume_map_dir))
    os.system('chmod 777 Plugins/infoGather/subdomain/ksubdomain/ksubdomain_linux')
    os.system('chmod 777 Plugins/Vul/Nuclei/nuclei')
    # print('shuize launch')
    # os.system('python3 ShuiZe.py --domainFile ../domain.txt -p 172.30.60.211:25378')
    os.system('rm -rf ./result')
    # os.system('python3 ShuiZe.py --domainFile ../domain.txt --justInfoGather 1 2>&1 | tee {}{}.log'.format(
    #     log_store_folder_dir, 'shuize'))
    os.system('python3 ShuiZe.py --domainFile ../domain.txt 2>&1 | tee {}{}.log'.format(
        log_store_folder_dir, 'shuize'))


def set_tool_flag_to_launch():
    chance_flag_value(oneforall_script_process_flag_name, 'launch')
    # chance_flag_value('shuize_tool', 'launch', docker_pentest_information_gather_volume_map_dir)


def set_tool_flag_to_finish():
    chance_flag_value(oneforall_script_process_flag_name, 'finish')
    # chance_flag_value('shuize_tool', 'finish', docker_pentest_information_gather_volume_map_dir)


def tidy_all_results():
    store_folder_dir = public_pool.get_results_store_dir()
    tidy_shuize_result_by_domain()
    os.system('cp {}/domain.txt {}'.format(docker_pentest_information_gather_volume_map_dir,
                                           public_pool.get_results_store_dir()))
    os.system(
        'mv {}/ShuiZe_0x727/result {}tool_residual_data/shuize/result'.format(docker_pentest_information_gather_volume_map_dir, store_folder_dir))
    os.system(
        'mv {}/OneForAll/results {}tool_residual_data/oneforall/results'.format(docker_pentest_information_gather_volume_map_dir,
                                                                         store_folder_dir))


def tidy_shuize_result_by_domain():
    domain_list = public_pool.get_domain_list()
    for domain in domain_list:
        # mv xlxs file
        shuize_domain_xlxs_file_dir = public_pool.get_dir_by_file_name(
            docker_pentest_information_gather_volume_map_dir + '/ShuiZe_0x727/result',
            domain + '.xlsx')
        os.system(
            'mv {} {}{}/shuize/'.format(shuize_domain_xlxs_file_dir,
                                        public_pool.get_results_store_dir(),
                                        domain))
        # mv shuize subdomain file
        os.system(
            'mv {}/ShuiZe_0x727/{}.txt {}{}/shuize/'.format(docker_pentest_information_gather_volume_map_dir, domain,
                                                            public_pool.get_results_store_dir(),
                                                            domain))
        # mv shuize_github_sensitive_file if exist
        shuize_github_sensitive_file_dir = public_pool.get_dir_by_file_name(
            docker_pentest_information_gather_volume_map_dir + '/ShuiZe_0x727/result',
            domain + '_github.txt')

        if shuize_github_sensitive_file_dir != None:
            # if os.path.exists(shuize_github_sensitive_file_dir):
            os.system(
                'mv {} {}{}/shuize/'.format(shuize_github_sensitive_file_dir,
                                            public_pool.get_results_store_dir(),
                                            domain))


if __name__ == '__main__':
    docker_pentest_information_gather_volume_dir = public_pool.docker_pentest_information_gather_volume_dir
    docker_pentest_information_gather_volume_map_dir = public_pool.docker_pentest_information_gather_volume_map_dir
    oneforall_image_name = public_pool.oneforall_image_name
    py2_ubuntu14_image_name = public_pool.py2_ubuntu14_image_name
    sock5_proxy = public_pool.sock5_proxy
    http_proxy = public_pool.http_proxy
    public_pool.create_work_dir()


    # launch oneforall
    set_tool_flag_to_launch()
    print(str(datetime.datetime.now()) + ' : oneforall launch')
    try:
        if get_flag_value('global_proxy').find('false') != -1:
            os.system('docker run -d --rm -v "{}'
                      ':{}" --entrypoint python {} '
                      '{}launch_oneforall.py run'.format(docker_pentest_information_gather_volume_dir,
                                                         docker_pentest_information_gather_volume_map_dir,
                                                         oneforall_image_name,
                                                         docker_pentest_information_gather_volume_map_dir))

        elif get_flag_value('global_proxy').find('true') != -1:
            os.system('docker run -d --rm --env HTTP_PROXY={} --env HTTPS_PROXY={} -v "{}'
                      ':{}" --entrypoint python {} '
                      '{}launch_oneforall.py run'.format(sock5_proxy, sock5_proxy,
                                                         docker_pentest_information_gather_volume_dir,
                                                         docker_pentest_information_gather_volume_map_dir,
                                                         oneforall_image_name,
                                                         docker_pentest_information_gather_volume_map_dir))
        else:
            raise Exception("get global proxy flag error!")
    except Exception as e:
        print(e)

    while get_flag_value(oneforall_script_process_flag_name) != 'finish':
        # print('oneforall not finish, sleep 3 second and retest')
        sleep(10)
    print(str(datetime.datetime.now()) + ' : oneforall finish')

    print(str(datetime.datetime.now()) + ' : shuize launch')
    launch_shuize()
    tidy_all_results()
    print(str(datetime.datetime.now()) + ' : shuize finish')

    print(str(datetime.datetime.now()) + ' : aquatone and bbscan launch')
    public_pool.launch_aquatone_and_bbscan()
    print(str(datetime.datetime.now()) + ' : aquatone and bbscan finish')

    # set all flag to false to prevent error
    set_tool_flag_to_finish()
    print(str(datetime.datetime.now()) + ' : pentest script finish')
    print(str(datetime.datetime.now()) + ' : so long !')
