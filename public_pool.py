import csv
import os
import re
from os import path
from time import sleep

# using two function to get env dir why program want to get docker_pentest_information_gather_volume_dir and
# docker_pentest_information_gather_volume_map_dir var which must in root dir as init dir to get others env dir.
config_file_name = 'PIG_flag.ini'
oneforall_script_process_flag_name = 'oneforall_tool'


# ensure the flag_name is unique
def init_env_var(flag_name):
    # search all of the file to get config file, so the config file name must to be unique.
    path = os.walk("/")
    for root, directories, files in path:
        for file in files:
            dir = root + '//' + file
            if dir.find(config_file_name) != -1:
                with open(dir, "r+") as flag_file:
                    file_content = [x.rstrip() for x in flag_file]
                    index = 0
                    while index < len(file_content):
                        if file_content[index].find(flag_name) != -1:
                            return file_content[index].split('=')[1].replace(' ', '')
                        index += 1


docker_pentest_information_gather_volume_dir = init_env_var('docker_pentest_information_gather_volume_dir')
docker_pentest_information_gather_volume_map_dir = init_env_var('docker_pentest_information_gather_volume_map_dir')


# ensure the flag_name is unique
def get_flag_value(flag_name):
    path = os.walk("{}".format(docker_pentest_information_gather_volume_map_dir))
    for root, directories, files in path:
        for file in files:
            dir = root + '//' + file
            if dir.find(config_file_name) != -1:
                with open(dir, "r+") as flag_file:
                    file_content = [x.rstrip() for x in flag_file]
                    index = 0
                    while index < len(file_content):
                        if file_content[index].find(flag_name) != -1:
                            return file_content[index].split('=')[1].replace(' ', '')
                        index += 1


oneforall_image_name = get_flag_value('oneforall_image_name')
py2_ubuntu14_image_name = get_flag_value('py2.7_ubuntu14.04_image_name')
sock5_proxy = get_flag_value('sock5_proxy')
http_proxy = get_flag_value('http_proxy')


def chance_flag_value(flag_name, flag_state_to_be_modified):
    path = os.walk("{}".format(docker_pentest_information_gather_volume_map_dir))
    for root, directories, files in path:
        for file in files:
            dir = root + '//' + file
            if dir.find(config_file_name) != -1:
                with open(dir, "r+") as flag_file:
                    file_content = [x.rstrip() for x in flag_file]
                    index = 0
                    while index < len(file_content):
                        if file_content[index].find(flag_name) != -1:
                            file_content[index] = '{} = {}'.format(flag_name, flag_state_to_be_modified)
                        index += 1
                    flag_file.seek(0)
                    flag_file.truncate()
                    # Write each line back
                    for line in file_content:
                        flag_file.write(line + "\n")


def get_global_sock5_proxy():
    try:
        global_proxy = get_flag_value('global_proxy')
        if global_proxy.find('false') != -1:
            return sock5_proxy
        elif global_proxy.find('true') != -1:
            return None
        else:
            raise Exception("get global proxy flag error!")
    except Exception as e:
        print(e)


def create_work_dir():
    store_folder = get_flag_value('store_floder_name')
    os.chdir('{}'.format(docker_pentest_information_gather_volume_map_dir))
    os.system('mkdir {}'.format(store_folder))
    os.system('mkdir {}/log'.format(store_folder))
    os.system('mkdir {}/log/aquatone_bbscan'.format(store_folder))
    os.system('mkdir {}/tool_residual_data'.format(store_folder))
    # os.system('mkdir {}/debug_data'.format(store_folder))
    os.system('touch {}/urls.txt'.format(store_folder))


def get_domain_list():
    my_file = open(docker_pentest_information_gather_volume_map_dir + "domain.txt", "r")
    content_list = my_file.readlines()
    domain_list = []
    for domain in content_list:
        domain_list.append(domain.rstrip())
    return domain_list


def get_results_store_dir():
    return docker_pentest_information_gather_volume_map_dir + get_flag_value('store_floder_name') + '/'


def get_dir_by_file_name(file_dir, file_name):
    path = os.walk("{}".format(file_dir))
    for root, directories, files in path:
        for file in files:
            dir = root + '/' + file
            if dir.find(file_name) != -1:
                return dir


def get_or_create_domain_store_dir(domain):
    domain_results_dir = get_results_store_dir() + domain + '/'
    if path.exists(domain_results_dir) == False:
        os.system('mkdir {}'.format(domain_results_dir))
    return domain_results_dir


# get subdomain by reg from like    # rm subdomain like s0.meituan.net 192.168.141.54:8080 172.30.19.239:8080 172.18.38.239:8080 172.18.180.235:8080 or 172.18.67.191:8080 10.32.168.184:8080 test.meituan.com
def rm_ip_from_subdomains(subdomains_list):
    new_subdomains_list = []
    for subdoamin in subdomains_list:
        if subdoamin.find(' ') != -1:
            subdoamins = re.findall('\S+\.\S+\.[A-Za-z]+', subdoamin)
            for subdoamin in subdoamins:
                new_subdomains_list.append(subdoamin)
        else:
            new_subdomains_list.append(subdoamin)
    return new_subdomains_list


def move_all_subdomain_txt_file_by_domain(domain):
    domain_results_dir = get_or_create_domain_store_dir(domain)
    # shuize results tidy
    os.system('mkdir {}shuize'.format(domain_results_dir))
    os.system(
        'mv {}/ShuiZe_0x727/{}_all_subdomains.txt {}shuize/'.format(docker_pentest_information_gather_volume_map_dir,
                                                                    domain,
                                                                    domain_results_dir))


def tidy_aquatone_urls_to_url_txt_by_subdomain(domain):
    domain_results_dir = get_or_create_domain_store_dir(domain)
    aquatone_urls_dir = "{}/aquatone/aquatone_urls.txt".format(domain_results_dir)

    while path.exists(aquatone_urls_dir) != True:
        sleep(3)
    aquatone_urls_file = open(aquatone_urls_dir, "r")
    content_list = aquatone_urls_file.readlines()
    clear_list = []
    import re
    reg = '(https?://.*):(\d*)\/?(.*)'
    for element in content_list:
        if re.findall(reg, element):
            element = re.findall(reg, element)[0][0]
        else:
            element = element.replace('/\n', '')
        clear_list.append(element)
    clear_list = set(clear_list)
    with open(get_results_store_dir() + 'urls.txt', "at") as urls_txt:
        for ele in clear_list:
            urls_txt.write(ele + '\n')
    with open(get_or_create_domain_store_dir(domain) + 'urls.txt', "at") as urls_txt:
        for ele in clear_list:
            urls_txt.write(ele + '\n')
    return clear_list


def launch_aquatone_and_bbscan():
    domain_list = get_domain_list()
    for domain in domain_list:
        try:
            if get_flag_value('global_proxy').find('false') != -1:
                os.system('docker run -d --rm -v "{}'
                          ':{}" {} /bin/bash -c "python  '
                          '{}launch_aquatone_bbscan.py -d {} 2>&1 | tee {}log/aquatone_bbscan/{}_aquatone_bbscan.log"'.format(
                    docker_pentest_information_gather_volume_dir, docker_pentest_information_gather_volume_map_dir,
                    py2_ubuntu14_image_name,
                    docker_pentest_information_gather_volume_map_dir,
                    domain,
                    get_results_store_dir(),
                    domain))
            elif get_flag_value('global_proxy').find('true') != -1:
                os.system('docker run -d --env HTTP_PROXY={} --env HTTPS_PROXY={} -v "{}'
                          ':{}" {} /bin/bash -c "python  '
                          '{}launch_aquatone_bbscan.py -d {} 2>&1 | tee {}log/aquatone_bbscan/{}_aquatone_bbscan.log"'.format(
                    sock5_proxy, sock5_proxy,
                    docker_pentest_information_gather_volume_dir, docker_pentest_information_gather_volume_map_dir,
                    py2_ubuntu14_image_name,
                    docker_pentest_information_gather_volume_map_dir,
                    domain,
                    get_results_store_dir(),
                    domain))
            else:
                raise Exception("get global proxy flag error!")
        except Exception as e:
            print(e)

        tidy_aquatone_urls_to_url_txt_by_subdomain(domain)


def launch_jsfinder(url_list, domain):
    print('launch jsfinder~')
    url_list_str = " ".join(url_list)
    domain_results_dir = get_or_create_domain_store_dir(domain)
    os.system(
        'python3 {}jsfinder/JSFinder.py -l {} -ou {}_jsfinder_tmp_url.txt -os {}_jsfinder_tmp_sub.txt'.format(
            docker_pentest_information_gather_volume_map_dir, url_list_str, domain, domain))

    os.system('mkdir {}jsfinder'.format(domain_results_dir))
    if path.exists('./{}_jsfinder_tmp_url.txt'.format(domain)) == True:
        os.system(
            "cat ./{}_jsfinder_tmp_url.txt |sort -u|grep -v 'png'|grep -v 'jpg'|grep -v 'jpeg'|grep -v 'gif'|grep -v "
            "'css'|grep -v 'woff'| grep -v 'ico' >> ./{}_jsfinder_url.txt".format(domain, domain))
        os.system('mv {}/ShuiZe_0x727/{}_jsfinder_tmp_url.txt {}jsfinder/'.format(
            docker_pentest_information_gather_volume_map_dir, domain,
            domain_results_dir))
        os.system('mv {}/ShuiZe_0x727/{}_jsfinder_url.txt {}jsfinder/'.format(
            docker_pentest_information_gather_volume_map_dir, domain,
            domain_results_dir))
    else:
        print('jsfinder not found url')

    if path.exists('./{}_jsfinder_tmp_sub.txt'.format(domain)) == True:
        jsfinder_subdomains_list = []
        with open('{}_jsfinder_tmp_sub.txt'.format(domain), "r") as jsfinder_tmp_sub:
            for line in jsfinder_tmp_sub:
                jsfinder_subdomains_list.append(line.strip('\n'))
        extract_subdomains_list = []
        # Remove non subdomain name lines , the line non subdoman contain \\
        for subdomain in jsfinder_subdomains_list:
            # clear subdomian like wisman-s300img.iboxpay.com\\friendCard__1496306763643.png\ and pnsz.iboxpay.com:443
            if subdomain.find('\\') == -1 and subdomain.find(':') == -1:
                extract_subdomains_list.append(subdomain)
            elif subdomain.find(':') != -1:
                extract_subdomains_list.append(subdomain.split(':')[0])
            elif subdomain.find('\\') != -1:
                extract_subdomains_list.append(subdomain.split('\\')[0])

        with open('{}_jsfinder_sub.txt'.format(domain), 'at') as f:
            for subdomain in extract_subdomains_list:
                f.writelines('{}\n'.format(subdomain))

        os.system('mv {}/ShuiZe_0x727/{}_jsfinder_tmp_sub.txt {}jsfinder/'.format(
            docker_pentest_information_gather_volume_map_dir, domain,
            domain_results_dir))

        os.system('mv {}/ShuiZe_0x727/{}_jsfinder_sub.txt {}jsfinder/'.format(
            docker_pentest_information_gather_volume_map_dir, domain,
            domain_results_dir))
        return list(set(extract_subdomains_list))
    else:
        print('jsfinder not found subdomain')
        return []


class oneforall_tool:
    def __init__(self, domain):
        # self.docker_pentest_information_gather_volume_map_dir = docker_pentest_information_gather_volume_map_dir
        self.pentest_docker_volume_dir = docker_pentest_information_gather_volume_map_dir
        self.oneforall_dir = docker_pentest_information_gather_volume_map_dir + 'OneForAll'
        self.domain = domain
        self.domain_list = get_domain_list()
        self.fields = ''

    def get_subdomains_from_oneforall_domain_csv(self):
        # csv file name
        filename = "{}/results/{}.csv".format(self.oneforall_dir, self.domain)
        # if path.exists(filename):
        #     print('true')

        oneforall_subdomain = []

        with open(filename, 'r', encoding='utf-8') as csvfile:
            csvreader = csv.reader(csvfile)
            try:
                self.fields = next(csvreader)
                for single_row in csvreader:
                    oneforall_subdomain.append(single_row[5])
            except:
                print('{} is empty.'.format(filename))
            return list(set(oneforall_subdomain))

    def get_domain_data_from_oneforall(self):
        if self.domain_list.index(self.domain) + 1 < len(self.domain_list):
            domain_next = self.domain_list[self.domain_list.index(self.domain) + 1]
        else:
            while get_flag_value(oneforall_script_process_flag_name).find('finish') == -1:
                sleep(3)
            domain_next = self.domain
        domain_filename = "{}/results/{}.csv".format(self.oneforall_dir, self.domain)
        # prevent the domain_filename is running so after it finish
        next_domain_filename = "{}/results/{}.csv".format(self.oneforall_dir, domain_next)
        global single_domain_complete_flag
        single_domain_complete_flag = False
        self.pentest_docker_volume_dir = '/pentest_information_gather/'
        while single_domain_complete_flag == False:
            sleep(3)
            if path.exists(domain_filename) and path.exists(next_domain_filename):
                single_domain_complete_flag = True
                return self.get_subdomains_from_oneforall_domain_csv()

    def tidy_result_by_domain(self):
        domain_results_dir = get_or_create_domain_store_dir(self.domain)
        os.system('mkdir {}oneforall'.format(domain_results_dir))
        os.system('mv {}/results/{}.csv {}oneforall/'.format(self.oneforall_dir, self.domain, domain_results_dir))


if __name__ == '__main__':
    # domain = 'iboxzone'
    # shuize_github_sensitive_file_dir = get_dir_by_file_name(
    #     docker_pentest_information_gather_volume_map_dir + '/ShuiZe_0x727/result',
    #     domain + '_github.txt')
    # print(shuize_github_sensitive_file_dir)
    # if shuize_github_sensitive_file_dir == None:
    #     print(1)

    # tidy_aquatone_urls_to_url_txt_by_subdomain(docker_pentest_information_gather_volume_map_dir,domain)
    store_folder = get_flag_value('sock5_proxy')
    # print(store_folder)
    # print(docker_pentest_information_gather_volume_map_dir)
    # get_global_proxy()
